apiVersion: v1
kind: ConfigMap
metadata:
  name: mon-platform-data
data:
  alertmanager.yml: |
    global: null
    route:
      receiver: "default"
      group_wait: "1s"
      group_interval: "1s"
      repeat_interval: "1s"
      group_by:
      - "cluster"
      - "alertname"
      routes: []
    receivers:
    - name: "default"
      webhook_configs:
      - send_resolved: true
        url: "http://localhost:8088"
    - name: "5d77d2f1-712d-47ad-8210-7ec841f092a5"
      webhook_configs:
      - send_resolved: true
        url: "http://172.18.204.81:8080/sla_manager/notifications"
  alert.rules: |
    groups: []
  calculate.rules: |
    ---
    groups:
    - rules: []
      name: "performanceMetric"
  prometheus.yml: |
    scrape_configs: []
    global:
      evaluation_interval: "10s"
      scrape_interval: "15s"
      external_labels: null
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - "mon-alertmanager:9093"
          labels: {}
    rule_files:
    - "alert.rules"
  logstash.conf: |
    input {
    	kafka {
    		bootstrap_servers => '192.168.3.10:9092' 
    		client_id => 'logstash' 
                    topics => [topictest3, topictest3]
    	}
    }

    ## Add your filters / logstash plugins configuration here
    filter {
    	json {
    		source => "message"
    		remove_field => ["message"]
    	}
    }

    output {
    	elasticsearch {
    		hosts => "elasticsearch:9200"
    		user => "elastic"
    		password => "changeme"
    	}
    }
#  config.properties: |
#    server.port=8989
#    server.ip=10.5.1.175
#    
#    prometheus.config=/mon/mon-core/prometheus/prometheus.yml
#    prometheus.alertRules=/mon/mon-core/prometheus/alert.rules
#    prometheus.alertManager=/mon/mon-core/alertmanager/alertmanager.yml
#    logstash.config=/mon/mon-core/logstash/logstash.conf
#    prometheus.calculateRules=/mon/mon-core/prometheus/calculate.rules
#    
#    
#    
#    grafana.host=mon_grafana
#    grafana.port=3000
#    grafana.token=key
#    
#    prometheus.host=mon_prometheus
#    prometheus.port=9090
#    
#    alertmanager.host=mon_alertmanager
#    alertmanager.port=9093
#    
#    # levels: TRACE, DEBUG, INFO, WARN, ERROR
#    logging.level=INFO
#    prometheus.PushGateway.group.id=prometheus
#    prometheus.PushGateway.topic=prometheus
#    kafka.bootstrap.servers=10.5.1.175:9092
#    
#    kibana.host=127.0.0.1
#    kibana.port=5601
#    
#    mongodb.host=127.0.0.1
#    mongodb.port=27017
#  exporters.json: |   #./config-manager-nxw/src/main/resources/exporters.json
#  fileserver: |       #/mon_git/
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mon-script-config-wget
data:
  mpscript.sh: |
    #!/bin/bash
    until wget -q http://repo-configs:8089; do echo waiting for repo-configs; sleep 1; done
    wget http://repo-configs:8089/5growth.5gr-ci/containerization/monitoring_platform/mon_app/config.properties -O /mon/config-manager-nxw/config.properties
    sed -i 's/.host=mon_/.host=mon-/g' /mon/config-manager-nxw/config.properties
    sed -i 's/kafka.bootstrap.servers=.*/kafka.bootstrap.servers=10.168.123.9:9092/g' /mon/config-manager-nxw/config.properties
    bash /mon/config-manager-nxw/configure_grafana.sh mon-grafana
---
apiVersion: v1
kind: Service
metadata:
  name: mon-platform
  labels:
    app: mon-platform
spec:
  type: NodePort
  ports:
  - port: 8989
    targetPort: 8989
  selector:
    app: mon-platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mon-platform-deployment
spec:
  selector:
    matchLabels:
      app: mon-platform
  replicas: 1
  template:
    metadata:
      labels:
        app: mon-platform
    spec:
      volumes:
      - name: mon-prps
        emptyDir: {}
      - name: mon-volume
        configMap:
          name: mon-platform-data
          items:
            - key: alertmanager.yml
              path: alertmanager/alertmanager.yml
            - key: alert.rules
              path: prometheus/alert.rules
            - key: calculate.rules
              path: prometheus/calculate.rules
            - key: prometheus.yml
              path: prometheus/prometheus.yml
            - key: logstash.conf
              path: logstash/logstash.conf
      - name: mon-script-config-volume-wget
        configMap:
          name: mon-script-config-wget
      containers:
      - name: mon-platform
        image: img:5000/mon_platform:local
        imagePullPolicy: IfNotPresent
#        command: ["sh", "-c", "cp -f /mon/temp/config.properties /mon/config-manager-nxw/config.properties && sed -i 's/.host=mon_/.host=mon-/g' /mon/config-manager-nxw/config.properties && sed -i 's/kafka.bootstrap.servers=.*/kafka.bootstrap.servers=10.168.123.9:9092/g' /mon/config-manager-nxw/config.properties && bash /mon/config-manager-nxw/configure_grafana.sh mon-grafana"]
        command: ["sh", "-c", "bash /mon/mon-core/cm/mpscript.sh"]
        volumeMounts:
          - name: mon-volume
            mountPath: /mon/mon-core
          - name: mon-prps
            mountPath: /mon/temp
          - name: mon-script-config-volume-wget
            mountPath: /mon/mon-core/cm
        ports:
        - containerPort: 8989
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mon-grafana-data
data:
  grafana.ini: |
    ##################### Grafana Configuration Example #####################
    #
    # Everything has defaults so you only need to uncomment things you want to
    # change

    # possible values : production, development
    ;app_mode = production

    # instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
    ;instance_name = ${HOSTNAME}

    #################################### Paths ####################################
    [paths]
    # Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
    ;data = /var/lib/grafana

    # Temporary files in `data` directory older than given duration will be removed
    ;temp_data_lifetime = 24h

    # Directory where grafana can store logs
    ;logs = /var/log/grafana

    # Directory where grafana will automatically scan and look for plugins
    ;plugins = /var/lib/grafana/plugins

    # folder that contains provisioning config files that grafana will apply on startup and while running.
    ;provisioning = conf/provisioning

    #################################### Server ####################################
    [server]
    # Protocol (http, https, socket)
    ;protocol = http

    # The ip address to bind to, empty will bind to all interfaces
    ;http_addr =

    # The http port  to use
    ;http_port = 3000

    # The public facing domain name used to access grafana from a browser
    ;domain = localhost

    # Redirect to correct domain if host header does not match domain
    # Prevents DNS rebinding attacks
    ;enforce_domain = false

    # The full public facing url you use in browser, used for redirects and emails
    # If you use reverse proxy and sub path specify full url (with sub path)
    ;root_url = http://localhost:3000

    # Log web requests
    ;router_logging = false

    # the path relative working path
    ;static_root_path = public

    # enable gzip
    ;enable_gzip = false

    # https certs & key file
    ;cert_file =
    ;cert_key =

    # Unix socket path
    ;socket =

    #################################### Database ####################################
    [database]
    # You can configure the database connection by specifying type, host, name, user and password
    # as separate properties or as on string using the url properties.

    # Either "mysql", "postgres" or "sqlite3", it's your choice
    ;type = sqlite3
    ;host = 127.0.0.1:3306
    ;name = grafana
    ;user = root
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    ;password =

    # Use either URL or the previous fields to configure the database
    # Example: mysql://user:secret@host:port/database
    ;url =

    # For "postgres" only, either "disable", "require" or "verify-full"
    ;ssl_mode = disable

    # For "sqlite3" only, path relative to data_path setting
    ;path = grafana.db

    # Max idle conn setting default is 2
    ;max_idle_conn = 2

    # Max conn setting default is 0 (mean not set)
    ;max_open_conn =

    # Connection Max Lifetime default is 14400 (means 14400 seconds or 4 hours)
    ;conn_max_lifetime = 14400

    # Set to true to log the sql calls and execution times.
    log_queries =

    # For "sqlite3" only. cache mode setting used for connecting to the database. (private, shared)
    ;cache_mode = private

    #################################### Cache server #############################
    [remote_cache]
    # Either "redis", "memcached" or "database" default is "database"
    ;type = database

    # cache connectionstring options
    # database: will use Grafana primary database.
    # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
    # memcache: 127.0.0.1:11211
    ;connstr =

    #################################### Session ####################################
    [session]
    # Either "memory", "file", "redis", "mysql", "postgres", default is "file"
    ;provider = file

    # Provider config options
    # memory: not have any config yet
    # file: session dir path, is relative to grafana data_path
    # redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
    # mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`
    # postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
    ;provider_config = sessions

    # Session cookie name
    ;cookie_name = grafana_sess

    # If you use session in https only, default is false
    ;cookie_secure = false

    # Session life time, default is 86400
    ;session_life_time = 86400

    #################################### Data proxy ###########################
    [dataproxy]

    # This enables data proxy logging, default is false
    ;logging = false

    # How long the data proxy should wait before timing out default is 30 (seconds)
    ;timeout = 30

    # If enabled and user is not anonymous, data proxy will add X-Grafana-User header with username into the request, default is false.
    ;send_user_header = false

    #################################### Analytics ####################################
    [analytics]
    # Server reporting, sends usage counters to stats.grafana.org every 24 hours.
    # No ip addresses are being tracked, only simple counters to track
    # running instances, dashboard and error counts. It is very helpful to us.
    # Change this option to false to disable reporting.
    ;reporting_enabled = true

    # Set to false to disable all checks to https://grafana.net
    # for new vesions (grafana itself and plugins), check is used
    # in some UI views to notify that grafana or plugin update exists
    # This option does not cause any auto updates, nor send any information
    # only a GET request to http://grafana.com to get latest versions
    ;check_for_updates = true

    # Google Analytics universal tracking code, only enabled if you specify an id here
    ;google_analytics_ua_id =

    # Google Tag Manager ID, only enabled if you specify an id here
    ;google_tag_manager_id =

    #################################### Security ####################################
    [security]
    # default admin user, created on startup
    admin_user = admin

    # default admin password, can be changed before first start of grafana,  or in profile settings
    admin_password = admin

    # used for signing
    secret_key = eyJrIjoicEd6VnRXRzhoSEFseFhVbGFJcTl

    # disable gravatar profile images
    ;disable_gravatar = false

    # data source proxy whitelist (ip_or_domain:port separated by spaces)
    ;data_source_proxy_whitelist =

    # disable protection against brute force login attempts
    disable_brute_force_login_protection = false

    # set to true if you host Grafana behind HTTPS. default is false.
    ;cookie_secure = false

    # set cookie SameSite attribute. defaults to `lax`. can be set to "lax", "strict" and "none"
    ;cookie_samesite = lax

    #################################### Snapshots ###########################
    [snapshots]
    # snapshot sharing options
    ;external_enabled = true
    ;external_snapshot_url = https://snapshots-origin.raintank.io
    ;external_snapshot_name = Publish to snapshot.raintank.io

    # remove expired snapshot
    ;snapshot_remove_expired = true

    #################################### Dashboards History ##################
    [dashboards]
    # Number dashboard versions to keep (per dashboard). Default: 20, Minimum: 1
    ;versions_to_keep = 20

    #################################### Users ###############################
    [users]
    # disable user signup / registration
    ;allow_sign_up = true

    # Allow non admin users to create organizations
    ;allow_org_create = true

    # Set to true to automatically assign new users to the default organization (id 1)
    ;auto_assign_org = true

    # Default role new users will be automatically assigned (if disabled above is set to true)
    ;auto_assign_org_role = Viewer

    # Background text for the user field on the login page
    ;login_hint = email or username
    ;password_hint = password

    # Default UI theme ("dark" or "light")
    ;default_theme = dark

    # External user management, these options affect the organization users view
    ;external_manage_link_url =
    ;external_manage_link_name =
    ;external_manage_info =

    # Viewers can edit/inspect dashboard settings in the browser. But not save the dashboard.
    ;viewers_can_edit = false

    # Editors can administrate dashboard, folders and teams they create
    ;editors_can_admin = false

    [auth]
    # Login cookie name
    ;login_cookie_name = grafana_session

    # The lifetime (days) an authenticated user can be inactive before being required to login at next visit. Default is 7 days,
    ;login_maximum_inactive_lifetime_days = 7

    # The maximum lifetime (days) an authenticated user can be logged in since login time before being required to login. Default is 30 days.
    ;login_maximum_lifetime_days = 30

    # How often should auth tokens be rotated for authenticated users when being active. The default is each 10 minutes.
    ;token_rotation_interval_minutes = 10

    # Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
    ;disable_login_form = false

    # Set to true to disable the signout link in the side menu. useful if you use auth.proxy, defaults to false
    ;disable_signout_menu = false

    # URL to redirect the user to after sign out
    ;signout_redirect_url =

    # Set to true to attempt login with OAuth automatically, skipping the login screen.
    # This setting is ignored if multiple OAuth providers are configured.
    ;oauth_auto_login = false

    #################################### Anonymous Auth ######################
    [auth.anonymous]
    # enable anonymous access
    ;enabled = false

    # specify organization name that should be used for unauthenticated users
    ;org_name = Main Org.

    # specify role for unauthenticated users
    ;org_role = Viewer

    #################################### Github Auth ##########################
    [auth.github]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://github.com/login/oauth/authorize
    ;token_url = https://github.com/login/oauth/access_token
    ;api_url = https://api.github.com/user
    ;team_ids =
    ;allowed_organizations =

    #################################### Google Auth ##########################
    [auth.google]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_client_id
    ;client_secret = some_client_secret
    ;scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
    ;auth_url = https://accounts.google.com/o/oauth2/auth
    ;token_url = https://accounts.google.com/o/oauth2/token
    ;api_url = https://www.googleapis.com/oauth2/v1/userinfo
    ;allowed_domains =

    #################################### Generic OAuth ##########################
    [auth.generic_oauth]
    ;enabled = false
    ;name = OAuth
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email,read:org
    ;auth_url = https://foo.bar/login/oauth/authorize
    ;token_url = https://foo.bar/login/oauth/access_token
    ;api_url = https://foo.bar/user
    ;team_ids =
    ;allowed_organizations =
    ;tls_skip_verify_insecure = false
    ;tls_client_cert =
    ;tls_client_key =
    ;tls_client_ca =

    ; Set to true to enable sending client_id and client_secret via POST body instead of Basic authentication HTTP header
    ; This might be required if the OAuth provider is not RFC6749 compliant, only supporting credentials passed via POST payload
    ;send_client_credentials_via_post = false

    #################################### Grafana.com Auth ####################
    [auth.grafana_com]
    ;enabled = false
    ;allow_sign_up = true
    ;client_id = some_id
    ;client_secret = some_secret
    ;scopes = user:email
    ;allowed_organizations =

    #################################### Auth Proxy ##########################
    [auth.proxy]
    ;enabled = false
    ;header_name = X-WEBAUTH-USER
    ;header_property = username
    ;auto_sign_up = true
    ;ldap_sync_ttl = 60
    ;whitelist = 192.168.1.1, 192.168.2.1
    ;headers = Email:X-User-Email, Name:X-User-Name

    #################################### Basic Auth ##########################
    [auth.basic]
    ;enabled = true

    #################################### Auth LDAP ##########################
    [auth.ldap]
    ;enabled = false
    ;config_file = /etc/grafana/ldap.toml
    ;allow_sign_up = true

    #################################### SMTP / Emailing ##########################
    [smtp]
    ;enabled = false
    ;host = localhost:25
    ;user =
    # If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
    ;password =
    ;cert_file =
    ;key_file =
    ;skip_verify = false
    ;from_address = admin@grafana.localhost
    ;from_name = Grafana
    # EHLO identity in SMTP dialog (defaults to instance_name)
    ;ehlo_identity = dashboard.example.com

    [emails]
    ;welcome_email_on_sign_up = false

    #################################### Logging ##########################
    [log]
    # Either "console", "file", "syslog". Default is console and  file
    # Use space to separate multiple modes, e.g. "console file"
    ;mode = console file

    # Either "debug", "info", "warn", "error", "critical", default is "info"
    ;level = info

    # optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
    ;filters =

    # For "console" mode only
    [log.console]
    ;level =

    # log line format, valid options are text, console and json
    ;format = console

    # For "file" mode only
    [log.file]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # This enables automated log rotate(switch of following options), default is true
    ;log_rotate = true

    # Max line number of single file, default is 1000000
    ;max_lines = 1000000

    # Max size shift of single file, default is 28 means 1 << 28, 256MB
    ;max_size_shift = 28

    # Segment log daily, default is true
    ;daily_rotate = true

    # Expired days of log file(delete after max days), default is 7
    ;max_days = 7

    [log.syslog]
    ;level =

    # log line format, valid options are text, console and json
    ;format = text

    # Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
    ;network =
    ;address =

    # Syslog facility. user, daemon and local0 through local7 are valid.
    ;facility =

    # Syslog tag. By default, the process' argv[0] is used.
    ;tag =

    #################################### Alerting ############################
    [alerting]
    # Disable alerting engine & UI features
    ;enabled = true
    # Makes it possible to turn off alert rule execution but alerting UI is visible
    ;execute_alerts = true

    # Default setting for new alert rules. Defaults to categorize error and timeouts as alerting. (alerting, keep_state)
    ;error_or_timeout = alerting

    # Default setting for how Grafana handles nodata or null values in alerting. (alerting, no_data, keep_state, ok)
    ;nodata_or_nullvalues = no_data

    # Alert notifications can include images, but rendering many images at the same time can overload the server
    # This limit will protect the server from render overloading and make sure notifications are sent out quickly
    ;concurrent_render_limit = 5

    #################################### Explore #############################
    [explore]
    # Enable the Explore section
    ;enabled = true

    #################################### Internal Grafana Metrics ##########################
    # Metrics available at HTTP API Url /metrics
    [metrics]
    # Disable / Enable internal metrics
    ;enabled           = true

    # Publish interval
    ;interval_seconds  = 10

    # Send internal metrics to Graphite
    [metrics.graphite]
    # Enable by setting the address setting (ex localhost:2003)
    ;address =
    ;prefix = prod.grafana.%(instance_name)s.

    #################################### Distributed tracing ############
    [tracing.jaeger]
    # Enable by setting the address sending traces to jaeger (ex localhost:6831)
    ;address = localhost:6831
    # Tag that will always be included in when creating new spans. ex (tag1:value1,tag2:value2)
    ;always_included_tag = tag1:value1
    # Type specifies the type of the sampler: const, probabilistic, rateLimiting, or remote
    ;sampler_type = const
    # jaeger samplerconfig param
    # for "const" sampler, 0 or 1 for always false/true respectively
    # for "probabilistic" sampler, a probability between 0 and 1
    # for "rateLimiting" sampler, the number of spans per second
    # for "remote" sampler, param is the same as for "probabilistic"
    # and indicates the initial sampling rate before the actual one
    # is received from the mothership
    ;sampler_param = 1

    #################################### Grafana.com integration  ##########################
    # Url used to import dashboards directly from Grafana.com
    [grafana_com]
    ;url = https://grafana.com

    #################################### External image storage ##########################
    [external_image_storage]
    # Used for uploading images to public servers so they can be included in slack/email messages.
    # you can choose between (s3, webdav, gcs, azure_blob, local)
    ;provider =

    [external_image_storage.s3]
    ;bucket =
    ;region =
    ;path =
    ;access_key =
    ;secret_key =

    [external_image_storage.webdav]
    ;url =
    ;public_url =
    ;username =
    ;password =

    [external_image_storage.gcs]
    ;key_file =
    ;bucket =
    ;path =

    [external_image_storage.azure_blob]
    ;account_name =
    ;account_key =
    ;container_name =

    [external_image_storage.local]
    # does not require any configuration

    [rendering]
    # Options to configure external image rendering server like https://github.com/grafana/grafana-image-renderer
    ;server_url =
    ;callback_url =

    [enterprise]
    # Path to a valid Grafana Enterprise license.jwt file
    ;license_path =

    [panels]
    ;enable_alpha = false
    # If set to true Grafana will allow script tags in text panels. Not recommended as it enable XSS vulnerabilities.
    ;disable_sanitize_html = false
  datasource.yaml: |
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://mon-prometheus:9090
---
apiVersion: v1
kind: Service
metadata:
  name: mon-grafana
  labels:
    app: mon-grafana
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    #  nodePort: 3000
  selector:
    app: mon-grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mon-grafana-deployment
spec:
  selector:
    matchLabels:
      app: mon-grafana
  replicas: 1
  template:
    metadata:
      labels:
        app: mon-grafana
    spec:
      volumes:
      - name: mon-grafana-volume
        configMap:
          name: mon-grafana-data
          items:
            - key: grafana.ini
              path: grafana.ini
            - key: datasource.yaml
              path: provisioning/datasources/datasource.yaml
      containers:
      - name: mon-grafana
        image: grafana/grafana
        volumeMounts:
          - name: mon-grafana-volume
            mountPath: /etc/grafana
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: mon-prometheus
  labels:
    app: mon-prometheus
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: mon-prometheus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mon-prometheus-deployment
spec:
  selector:
    matchLabels:
      app: mon-prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: mon-prometheus
    spec:
      volumes:
      - name: mon-prometheus-volume
        configMap:
          name: mon-platform-data
          items:
            - key: alert.rules
              path: alert.rules
            - key: prometheus.yml
              path: prometheus.yml
      containers:
      - name: mon-prometheus
        image: prom/prometheus
        args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --web.enable-lifecycle
        volumeMounts:
          - name: mon-prometheus-volume
            mountPath: /etc/prometheus
        ports:
        - containerPort: 9090
---
apiVersion: v1
kind: Service
metadata:
  name: mon-alertmanager
  labels:
    app: mon-alertmanager
spec:
  type: NodePort
  ports:
  - port: 9093
    targetPort: 9093
  selector:
    app: mon-alertmanager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mon-alertmanager-deployment
spec:
  selector:
    matchLabels:
      app: mon-alertmanager
  replicas: 1
  template:
    metadata:
      labels:
        app: mon-alertmanager
    spec:
      volumes:
      - name: mon-alertmanager-volume
        configMap:
          name: mon-platform-data
          items:
            - key: alertmanager.yml
              path: alertmanager.yml
      containers:
      - name: mon-alertmanager
        image: prom/alertmanager
        volumeMounts:
          - name: mon-alertmanager-volume
            mountPath: /etc/alertmanager
        ports:
        - containerPort: 9093
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    app: mon-zookeeper
spec:
  type: NodePort
  ports:
  - port: 2181
    targetPort: 2181
    name: client
  - port: 2888
    name: follower
    protocol: TCP
  - port: 3888
    name: leader
    protocol: TCP
  selector:
    app: mon-zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mon-zookeeper-deployment
spec:
  selector:
    matchLabels:
      app: mon-zookeeper
  replicas: 1
  template:
    metadata:
      labels:
        app: mon-zookeeper
    spec:
      containers:
      - name: mon-zookeeper
        image: confluentinc/cp-zookeeper:5.4.0
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        ports:
        - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: broker
  labels:
    app: mon-broker
spec:
#  type: NodePort
#  clusterIP: None
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: placeholder1
  - port: 29092
    protocol: TCP
    name: placeholder2
  externalIPs:
  - 10.168.123.9

  selector:
    app: mon-broker
---
apiVersion: v1
kind: Service
metadata:
#  name: broker
  name: bootstrap
  labels:
    app: mon-broker
spec:
#  type: NodePort
  clusterIP: None
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
  selector:
    app: mon-broker
#---
#kind: StorageClass
#apiVersion: storage.k8s.io/v1
#metadata:
#  name: broker
#provisioner: kubernetes.io/no-provisioner
#volumeBindingMode: WaitForFirstConsumer
#allowVolumeExpansion: true
#---
#apiVersion: v1
#kind: PersistentVolume
#metadata:
#    name: broker
#spec:
#  capacity:
#    storage: 2Gi
#  volumeMode: Filesystem
#  accessModes:
#    - ReadWriteOnce
#  persistentVolumeReclaimPolicy: Retain
#  storageClassName: broker
#  local:
#    path: /storage01/broker
#  nodeAffinity:
#    required:
#      nodeSelectorTerms:
#      - matchExpressions:
#        - key: kubernetes.io/hostname
#          operator: In
#          values:
#            - minikube
#---
#kind: PersistentVolumeClaim
#apiVersion: v1
#metadata:
#  name: broker
#spec:
#  storageClassName: broker
#  accessModes:
#    - ReadWriteOnce
#  volumeMode: Filesystem
#  resources:
#    requests:
#      storage: 2Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mon-broker-deployment
spec:
  serviceName: broker
  selector:
    matchLabels:
      app: mon-broker
  replicas: 1
  template:
    metadata:
      labels:
        app: mon-broker
    spec:
      volumes:
        - name: broker-data
          emptyDir: { }
      containers:
      - name: mon-broker
        image: confluentinc/cp-server:5.4.0
        env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: 'zookeeper:2181'
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://mon-broker-deployment-0:29092,PLAINTEXT_HOST://10.168.123.9:9092"
        - name: KAFKA_METRIC_REPORTERS
          value: io.confluent.metrics.reporter.ConfluentMetricsReporter
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: mon-broker-deployment-0:29092
        - name: CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        - name: CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS
          value: "1"
        - name: CONFLUENT_METRICS_ENABLE
          value: 'true'
        - name: CONFLUENT_SUPPORT_CUSTOMER_ID
          value: 'anonymous'
#        - name: ZOOKEEPER_CLIENT_PORT
#          value: "2181"
        ports:
        - containerPort: 9092
        - containerPort: 29092
        volumeMounts:
          - name: broker-data
            mountPath: /var/lib/kafka/data
#      volumes:
#      - name: broker-data
#        persistentVolumeClaim:
#          claimName: broker

