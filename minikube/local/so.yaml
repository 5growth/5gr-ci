---
apiVersion: v1
kind: ConfigMap
metadata:
  name: so-script-config
data:
  soscript.sh: |
    #until wget -q http://repo-configs:8089; do echo waiting for repo-configs; sleep 1; done
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/coreMano.properties -O /usr/src/app/5Gr-SO/coreMano/coreMano.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/coreMano.properties                   /usr/src/app/5Gr-SO/coreMano/coreMano.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/db.properties                         /usr/src/app/5Gr-SO/db/db.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/mtp.properties                        /usr/src/app/5Gr-SO/mtp.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/rooe.properties                       /usr/src/app/5Gr-SO/sm/rooe/rooe.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/vim.properties                        /usr/src/app/5Gr-SO/coreMano/vim.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/monitoring.properties                 /usr/src/app/5Gr-SO/monitoring/monitoring.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/vs.properties                         /usr/src/app/5Gr-SO/sm/soe/vs.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/federation.properties                 /usr/src/app/5Gr-SO/sm/soe/federation.properties
    cp -f /usr/src/app/5Gr-SO/tmp/cm/start.sh                              /usr/src/app/5Gr-SO/nbi/python-flask-server/start.sh
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/db.properties -O /usr/src/app/5Gr-SO/db/db.properties
    #sed -i 's/so_mongo/so-mongo/g' /usr/src/app/5Gr-SO/db/db.properties 
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/mtp.properties -O /usr/src/app/5Gr-SO/mtp.properties
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/rooe.properties -O /usr/src/app/5Gr-SO/sm/rooe/rooe.properties
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/vim.properties -O /usr/src/app/5Gr-SO/coreMano/vim.properties
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/monitoring.properties -O /usr/src/app/5Gr-SO/monitoring/monitoring.properties
    #sed -i 's/mon_platform/mon-platform/g' /usr/src/app/5Gr-SO/monitoring/monitoring.properties 
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/vs.properties -O /usr/src/app/5Gr-SO/sm/soe/vs.properties
    #sed -i 's/vs_app/vs-app/g' /usr/src/app/5Gr-SO/sm/soe/vs.properties 
    #sed -i 's/10.0.200.234/172.17.0.1/g' /usr/src/app/5Gr-SO/sm/soe/vs.properties 
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/federation.properties -O /usr/src/app/5Gr-SO/sm/soe/federation.properties
    #wget -r http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/test/
    #cp -rf repo-configs\:8089/5growth.5gr-ci/containerization/so/so_app/config/test/* /usr/src/app/5Gr-SO/test/
    #sed -i 's/vs_app/vs-app/g' /usr/src/app/5Gr-SO/test/run_vs_test.py  
    cp -f /usr/src/app/5Gr-SO/test/tmp/regression_test_scale.py       /usr/src/app/5Gr-SO/test/regression_test_scale.py
    cp -f /usr/src/app/5Gr-SO/test/tmp/run_vs_test.py                 /usr/src/app/5Gr-SO/test/run_vs_test.py
    cp -f /usr/src/app/5Gr-SO/test/tmp/requiements.txt /usr/src/app/5Gr-SO/test/requiements.txt

    cat /usr/src/app/5Gr-SO/test/json/CDN_all_NSD_0_17.json           | tee /usr/src/app/5Gr-SO/descriptors/CDN_all_NSD_0_17.json
    cat /usr/src/app/5Gr-SO/test/json/CDN_WEBSERVER_VNFD_0_9.json     | tee /usr/src/app/5Gr-SO/descriptors/CDN_WEBSERVER_VNFD_0_9.json
    cat /usr/src/app/5Gr-SO/test/json/CDN_SPR2_VNFD_0_9.json          | tee /usr/src/app/5Gr-SO/descriptors/CDN_SPR2_VNFD_0_9.json
    cat /usr/src/app/5Gr-SO/test/json/CDN_SPR1_VNFD_0_9.json          | tee /usr/src/app/5Gr-SO/descriptors/CDN_SPR1_VNFD_0_9.json
    cat /usr/src/app/5Gr-SO/test/json/CDN_PROBE_VNFD_0_9.json         | tee /usr/src/app/5Gr-SO/descriptors/CDN_PROBE_VNFD_0_9.json

    #sed -i 's/10.5.1.187/vs-file-share/g' /usr/src/app/5Gr-SO/test/json/*  
    #sed -i 's/10.5.1.187/10.168.123.9/g' /usr/src/app/5Gr-SO/mtp.properties  
    #sed -i 's/10.5.1.68/10.168.123.11/g' /usr/src/app/5Gr-SO/coreMano/coreMano.properties 
    #wget -r http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/config/descriptors/
    #cp -rf repo-configs\:8089/5growth.5gr-ci/containerization/so/so_app/config/descriptors/ /usr/src/app/5Gr-SO/
    #sed -i 's/so_mongo/so-mongo/g' /usr/src/app/5Gr-SO/test/run_vs_test.py  
    #sed -i 's/probeserver_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/descriptors/CDN_*_VNFD_0_9* 
    #sed -i 's/probeserver_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/test/json/CDN_*_VNFD_0_9* 
    #sed -i 's/SPR1_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/descriptors/CDN_*_VNFD_0_9* 
    #sed -i 's/SPR1_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/test/json/CDN_*_VNFD_0_9* 
    #sed -i 's/SPR2_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/descriptors/CDN_*_VNFD_0_9* 
    #sed -i 's/SPR2_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/test/json/CDN_*_VNFD_0_9* 
    #sed -i 's/WEBSERVER_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/descriptors/CDN_*_VNFD_0_9* 
    #sed -i 's/WEBSERVER_open/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/test/json/CDN_*_VNFD_0_9*
    #sed -i 's/xenial-server-cloudimg-amd64-disk1/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/descriptors/CDN_*_VNFD_0_9* 
    #sed -i 's/xenial-server-cloudimg-amd64-disk1/cirros-0.5.1-x86_64-disk/g' /usr/src/app/5Gr-SO/test/json/CDN_*_VNFD_0_9* 
    #rm -rf /usr/src/app/5Gr-SO/nbi/python-flask-server/start.sh*
    #wget http://repo-configs:8089/5growth.5gr-ci/containerization/so/so_app/start.sh -O /usr/src/app/5Gr-SO/nbi/python-flask-server/start.sh
    bash /usr/src/app/5Gr-SO/nbi/python-flask-server/start.sh
  coreMano.properties: |
    [CoreMano]
    name=cloudify
    ip=10.168.123.11
    
    [OSM]
    release=6
    ro_host=10.241.120.48
    user=admin
    password=admin
    project=admin
    
    [Cloudify]
    user=admin
    password=admin
    tenant=default_tenant
    wrapper=mtp
    default_key_name=sssakey
    install_cloudify_agent=no
    install_rvm_agent=yes
    vlan=
    
    [PA]
    pa_enable=false
    pa_simulate=false
  db.properties: |
    [MongoDB]
    db.ip=so-mongo
    db.port=27017
  mtp.properties: |
    [MTP]
    mtp.ip=10.168.123.9
    mtp.port=50000
    mtp.base_path=/mtpbase
  rooe.properties: |
    [PA]
    pa.ip=10.0.200.231
    pa.port=6161
    pa.path=/5gt/so/v1/PAComp
    pa.enable=no
    
    [RESPONSE]
    #key is not case sensitive
    vCDN =
           {
                  "usedNFVIPops": [{"NFVIPoPID": "1", "mappedVNFs": ["webserver", "spr1", "spr2", "probeserver"]}],
                  "totalCost": 0,
                  "usedLLs": [],
                  "totalLatency": 0.0,
                  "usedVLs": [{"NFVIPoP": "1", "mappedVLs": ["VideoData", "VideoDistribution", "mgt"]}]
             }
  vim.properties: |
    [VIM]
    number=2
    
    [VIM1]
    vimId=1
    ip=10.0.200.231
    user=admin
    password=admin
    tenant_name=admin
    auth_url=http://10.168.123.10/identity
    region=RegionOne
    external_network=public
    #vl_interface=interfacevl
    vl_interface=i_pop
    numbernfvipop=1
    
    [NFVIPOP_VIM1_1]
    nfviPopId=1
    vimId=1
    geographicalLocationInfo=Castelldefels
    networkConnectivityEndpoint=0000000000000002-00000003
    
    [NFVIPOP_VIM1_2]
    nfviPopId=11
    vimId=1
    geographicalLocationInfo=Barcelona
    networkConnectivityEndpoint=0000000000000003-00000003
    
    [VIM2]
    vimId=2
    ip=10.1.6.29
    user=admin
    password=admin
    tenant_name=admin
    auth_url=http://10.168.123.10/identity
    region=RegionOne
    external_network=public
    #vl_interface=interfacevl
    vl_interface=i_pop
    numbernfvipop=1
    
    [NFVIPOP_VIM2_1]
    nfviPopId=2
    vimId=2
    geographicalLocationInfo=Madrid
    networkConnectivityEndpoint=0000000000000004-00000003
  monitoring.properties: |
    [MONITORING]
    monitoring.ip=mon-platform
    monitoring.port=8989
    monitoring.base_path=/prom-manager
    monitoring.pushgateway=yes
    monitoring.pushgateway_ip=mon-platform
    monitoring.pushgateway_port=8989
    monitoring.kafka_ip=mon-platform
    monitoring.kafka_port=9092
    
    
    [ALERTS]
    monitoring_platform.ip=mon-platform
    monitoring_platform.port=8989
    monitoring_platform.base_path=/prom-manager
    monitoring_platform.alert_target=http://192.168.100.2:8080/sla_manager/notifications
    so_scale_ns.ip=192.168.100.1
    so_scale_ns.port=8080
    so_scale_ns.base_path=/5gt/so/v1/ns
    
    [EXPRESSIONS]
    VcpuUsageMean=avg((1 - avg by (instance) (irate(node_cpu_seconds_total{{nsId}, {vnfdId}, mode="idle"}[1m])))*100)
    VmemoryUsageMean=avg by (vnfdId)(((node_memory_MemTotal_bytes{{nsId}, {vnfdId}} - node_memory_MemFree_bytes{{nsId}, {vnfdId}}) / node_memory_MemTotal_bytes{{nsId}, {vnfdId}}) * 100)
    VdiskUsageMean=((node_filesystem_size_bytes{fstype=~"ext4|vfat", {nsId}, {vnfdId}} - node_filesystem_free_bytes{fstype=~"ext4|vfat", {nsId}, {vnfdId}}) / node_filesystem_size_bytes{fstype=~"ext4|vfat", {nsId}, {vnfdId}}) * 100 
    ByteIncoming=rate(node_network_receive_bytes_total{{port}, {nsId}, {vnfdId}}[1m])
  vs.properties: |
    [VS]
    number=5
    VS1=10.0.200.227
    VS2=localhost
    VS3=192.168.200.3
    VS4=vs-app
    #VS5=vs-app-deployment-0
    VS5=172.17.0.1
  federation.properties: |
    [FEDERATION]
    number=4
    Provider1=10.0.200.233
    Provider2=10.0.200.235
    Provider3=192.168.200.3
    Provider4=10.0.200.236
    ewbi_port=8085
    ewbi_path=/5gt/so-ewbi/v1/ns/
  start.sh: |
    #!/bin/bash
    echo 'Starting SO starting'
    python3 -m swagger_server &
    echo 'Started SO started'
    cd ../../ewbi/python-flask-server
    python3 -m swagger_server
    echo 'Starting SO EWBI started'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: so-json-config
data:
  CDN_all_NSD_0_17.json: |
    {"nsd":{"nsdIdentifier":"vCDN_v02","designer":"Nextworks","version":"0.3","nsdName":"vCDN_ATOS_TIMEO","nsdInvariantId":"vCDN_ATOS_TIMEO_v02","vnfdId":["probeserver","webserver","spr2","spr1"],"sapd":[{"cpdId":"probeSap","description":"Probe SAP for probe VNFs","layerProtocol":"IPV4","cpRole":"ROOT","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"sapAddressAssignment":false,"nsVirtualLinkDescId":"probe"},{"cpdId":"mgtSap","description":"Management SAP for all the vCDN VNFs","layerProtocol":"IPV4","cpRole":"ROOT","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"sapAddressAssignment":false,"nsVirtualLinkDescId":"mgt"},{"cpdId":"videoSap","description":"SAP interconnecting to the CDN clients","layerProtocol":"IPV4","cpRole":"ROOT","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"sapAddressAssignment":false,"nsVirtualLinkDescId":"VideoDistribution"}],"virtualLinkDesc":[{"virtualLinkDescId":"VideoDistribution","virtualLinkDescProvider":"NXW","virtuaLinkDescVersion":"0.1","connectivityType":{"layerProtocol":"IPV4"},"virtualLinkDf":[{"flavourId":"df_VideoDistribution","qos":{"latency":0,"packetDelayVariation":0,"packetLossRatio":0,"priority":0},"serviceAvaibilityLevel":"LEVEL_1","bitrateRequirements":{"root":2,"leaf":2}}],"description":"Network for video distribution"},{"virtualLinkDescId":"probe","virtualLinkDescProvider":"NXW","virtuaLinkDescVersion":"0.1","connectivityType":{"layerProtocol":"IPV4"},"virtualLinkDf":[{"flavourId":"df_probe","qos":{"latency":0,"packetDelayVariation":0,"packetLossRatio":0,"priority":0},"serviceAvaibilityLevel":"LEVEL_1","bitrateRequirements":{"root":4,"leaf":1}}],"description":"Probe network"},{"virtualLinkDescId":"mgt","virtualLinkDescProvider":"NXW","virtuaLinkDescVersion":"0.1","connectivityType":{"layerProtocol":"IPV4"},"virtualLinkDf":[{"flavourId":"df_mgt","qos":{"latency":0,"packetDelayVariation":0,"packetLossRatio":0,"priority":0},"serviceAvaibilityLevel":"LEVEL_1","bitrateRequirements":{"root":4,"leaf":1}}],"description":"Management network"},{"virtualLinkDescId":"VideoData","virtualLinkDescProvider":"NXW","virtuaLinkDescVersion":"0.1","connectivityType":{"layerProtocol":"IPV4"},"virtualLinkDf":[{"flavourId":"df_VideoData","qos":{"latency":0,"packetDelayVariation":0,"packetLossRatio":0,"priority":0},"serviceAvaibilityLevel":"LEVEL_1","bitrateRequirements":{"root":8,"leaf":8}}],"description":"Network for retrieving videos from origin server"}],"nsDf":[{"nsDfId":"df_vCDN","flavourKey":"df_vCDN","vnfProfile":[{"vnfProfileId":"probeserver_profile","vnfdId":"probeserver","flavourId":"df_probeserver","instantiationLevel":"il_probeserver","minNumberOfInstances":1,"maxNumberOfInstances":1,"nsVirtualLinkConnectivity":[{"virtualLinkProfileId":"vl_profile_Probe","cpdId":["probeProbeExt"]}]},{"vnfProfileId":"webserver_profile","vnfdId":"webserver","flavourId":"df_webserver","instantiationLevel":"il_webserver","minNumberOfInstances":1,"maxNumberOfInstances":1,"nsVirtualLinkConnectivity":[{"virtualLinkProfileId":"vl_profile_VideoDistribution","cpdId":["webDistExt"]}],"script":[{"target":"webserver","start":{"args":{"1":"vnf.webserver.vdu.webserver_vdu.extcp.webDistExt.floating"},"script":["#/bin/bash","set -e","curl -X PATCH \\","  http://localhost:8888/vnfconfig/v1/configuration \\","  -H 'Content-Type: application/json' \\","  -d '{","\"key\": \"vnf.spr2\",","\"value\": \"'\"$1:800\"'\"","}'"]},"stop":{"args":{"1":"vnf.webserver.vdu.webserver_vdu.extcp.webDistExt.floating"},"script":["#! /bin/bash","set -e","curl -X DELETE \\","  http://localhost:8888/vnfconfig/v1/configuration/$1:800"]}}]},{"vnfProfileId":"spr1_profile","vnfdId":"spr1","flavourId":"df_spr1","instantiationLevel":"il_spr1","minNumberOfInstances":1,"maxNumberOfInstances":1,"nsVirtualLinkConnectivity":[{"virtualLinkProfileId":"vl_profile_mgt","cpdId":["spr1MgtExt"]},{"virtualLinkProfileId":"vl_profile_VideoData","cpdId":["spr1DataExt"]}],"script":[]},{"vnfProfileId":"spr2_profile","vnfdId":"spr2","flavourId":"df_spr2","instantiationLevel":"il_spr2","minNumberOfInstances":1,"maxNumberOfInstances":2,"nsVirtualLinkConnectivity":[{"virtualLinkProfileId":"vl_profile_VideoDistribution","cpdId":["spr2DistExt"]},{"virtualLinkProfileId":"vl_profile_VideoData","cpdId":["spr2DataExt"]}],"script":[{"target":"spr2","start":{"args":{"1":"vnf.spr1.vdu.spr1_vdu.intcp.spr1DataExt.address"},"script":["#/bin/bash","curl -X PATCH \\","  http://localhost:8888/vnfconfig/v1/configuration \\","  -H 'Content-Type: application/json' \\","  -d '{","      \"vnfConfigurationData\": {","      \"cpConfiguration\": [],","      \"dhcpServer\": \"null\",","      \"vnfSpecificData\": [{","      \"key\": \"vnf.spr1.vdu.spr1_vdu.intcp.spr1DataInt.address\",","      \"value\": \"'\"$1\"'\"","      }","      ]","      },","      \"vnfcConfigurationData\": [],","      \"vnfInstanceId\": \"553\"","}'"]},"stop":{"args":{"1":"192.168.1.2","2":"vnf.spr1.vdu.spr1_vdu.intcp.spr1DataExt.address"},"script":["#! /bin/bash -e","#will log \"first arg is: arg1_value","echo \"stop first arg is: $1\"","#will log \"first arg is: arg2_value","echo \"stop second arg is: $2\""]}},{"target":"webserver","start":{"args":{"1":"spr2","2":"vnf.spr2.vdu.spr2_vdu.intcp.spr2DistExt.address"},"script":["#/bin/bash","set -e","sudo sed -i \"/video_server_cache_backend/a\\    server $1_$2 $2:8080 check\" /etc/haproxy/haproxy.cfg","sudo systemctl reload haproxy.service"]},"stop":{"args":{"1":"spr2","2":"vnf.spr2.vdu.spr2_vdu.intcp.spr2DistExt.address"},"script":["#! /bin/bash","set -e","sudo sed -i \"/server $1_$2 $2:8080 check/d\" /etc/haproxy/haproxy.cfg","sudo systemctl reload haproxy.service"]}}]}],"virtualLinkProfile":[{"virtualLinkProfileId":"vl_profile_Probe","virtualLinkDescId":"probe","flavourId":"df_probe","maxBitrateRequirements":{"root":"1","leaf":"1"},"minBitrateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_mgt","virtualLinkDescId":"mgt","flavourId":"df_mgt","maxBitrateRequirements":{"root":"1","leaf":"1"},"minBitrateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_VideoData","virtualLinkDescId":"VideoData","flavourId":"df_VideoData","maxBitrateRequirements":{"root":"1","leaf":"1"},"minBitrateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_VideoDistribution","virtualLinkDescId":"VideoDistribution","flavourId":"df_VideoDistribution","maxBitrateRequirements":{"root":"1","leaf":"1"},"minBitrateRequirements":{"root":"1","leaf":"1"}}],"nsInstantiationLevel":[{"nsLevelId":"il_vCDN_big","description":"Big instantiation level for the vCDN","vnfToLevelMapping":[{"vnfProfileId":"probeserver_profile","numberOfInstances":1},{"vnfProfileId":"webserver_profile","numberOfInstances":1},{"vnfProfileId":"spr1_profile","numberOfInstances":1},{"vnfProfileId":"spr2_profile","numberOfInstances":2}],"virtualLinkToLevelMapping":[{"virtualLinkProfileId":"vl_profile_Probe","bitRateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_mgt","bitRateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_VideoData","bitRateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_VideoDistribution","bitRateRequirements":{"root":"1","leaf":"1"}}]},{"nsLevelId":"il_vCDN_small","description":"Small instantiation level for the vCDN","vnfToLevelMapping":[{"vnfProfileId":"probeserver_profile","numberOfInstances":1},{"vnfProfileId":"webserver_profile","numberOfInstances":1},{"vnfProfileId":"spr1_profile","numberOfInstances":1},{"vnfProfileId":"spr2_profile","numberOfInstances":1}],"virtualLinkToLevelMapping":[{"virtualLinkProfileId":"vl_profile_Probe","bitRateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_mgt","bitRateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_VideoData","bitRateRequirements":{"root":"1","leaf":"1"}},{"virtualLinkProfileId":"vl_profile_VideoDistribution","bitRateRequirements":{"root":"1","leaf":"1"}}]}],"defaultNsInstantiationLevelId":"il_vCDN_small","nsProfile":[{"nsProfileId":"ns_profile_vCdn_big","nsdId":"vCDN_v01","nsDfId":"df_vCDN","nsInstantiationLevelId":"il_vCDN_big","minNumberOfInstances":1,"maxNumberOfInstances":1},{"nsProfileId":"ns_profile_vCdn_small","nsdId":"vCDN_v01","nsDfId":"df_vCDN","nsInstantiationLevelId":"il_vCDN_small","minNumberOfInstances":1,"maxNumberOfInstances":1}],"dependencies":[{"primaryId":["spr1_profile"],"secondaryId":["spr2_profile","webserver_profile"]},{"primaryId":["spr2_profile"],"secondaryId":["webserver_profile"]}]}],"monitoredInfo":[{"monitoringParameter":{"monitoringParameterId":"mp1","name":"cacheLoad","performanceMetric":"VcpuUsageMean.spr2","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp2","name":"webserverLoad","performanceMetric":"VcpuUsageMean.webserver","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp3","name":"cacheLoad","performanceMetric":"VmemoryUsageMean.spr2","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp4","name":"webserverLoad","performanceMetric":"VmemoryUsageMean.webserver","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp5","name":"cacheLoad","performanceMetric":"VdiskUsageMean.spr2","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp6","name":"webserverLoad","performanceMetric":"VdiskUsageMean.webserver","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp7","name":"cacheLoad","performanceMetric":"ByteIncoming.spr2.eth0","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp8","name":"webserverLoad","performanceMetric":"ByteIncoming.webserver.eth0","exporter":"node_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp9","name":"onewaylatency","performanceMetric":"linklatency.spr2.webserver","type":"link_metric","params":{"ip":"vnf.webserver.vdu.webserver_vdu.intcp.webDistExt.address","polling":2},"exporter":"onewaylatency_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp10","name":"onewaypacketLoss","performanceMetric":"packetLoss.spr2.webserver","type":"link_metric","params":{"ip":"vnf.webserver.vdu.webserver_vdu.intcp.webDistExt.address","polling":2},"exporter":"onewaylatency_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp11","name":"onewayjitter","performanceMetric":"jitter.spr2.webserver","type":"link_metric","params":{"ip":"vnf.webserver.vdu.webserver_vdu.intcp.webDistExt.address","polling":2},"exporter":"onewaylatency_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp12","name":"http_request_latency","performanceMetric":"http_request_latency.probeserver.webserver","type":"application_metric","params":{"target":"http://vnf.webserver.vdu.webserver_vdu.extcp.webDistExt.floating:80","module":"http_2xx-general"},"exporter":"blackbox_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp13","name":"http_service_availability","performanceMetric":"http_service_availability.probeserver.webserver","type":"application_metric","params":{"target":"http://vnf.webserver.vdu.webserver_vdu.extcp.webDistExt.floating:80","module":"http_2xx-general"},"exporter":"blackbox_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp14","name":"http_service_probe","performanceMetric":"http_service_probe.probeserver.webserver","type":"application_metric","params":{"target":"http://vnf.webserver.vdu.webserver_vdu.extcp.webDistExt.floating:80","module":"http_2xx-general"},"exporter":"blackbox_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp15","name":"http_request_latency","performanceMetric":"http_request_latency.probeserver.spr2","type":"application_metric","params":{"target":"http://vnf.spr2.vdu.spr2_vdu.extcp.spr2DistExt.floating:80","module":"http_2xx-general"},"exporter":"blackbox_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp16","name":"http_service_availability","performanceMetric":"http_service_availability.probeserver.spr2","type":"application_metric","params":{"target":"http://vnf.spr2.vdu.spr2_vdu.extcp.spr2DistExt.floating:80","module":"http_2xx-general"},"exporter":"blackbox_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp17","name":"http_service_probe","performanceMetric":"http_service_probe.probeserver.spr2","type":"application_metric","params":{"target":"http://vnf.spr2.vdu.spr2_vdu.extcp.spr2DistExt.floating:80","module":"http_2xx-general"},"exporter":"blackbox_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp18","name":"client_side_latency_ms","performanceMetric":"client_side_latency_ms.webserver","exporter":"peccm_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp19","name":"client_side_parsing_ms","performanceMetric":"client_side_parsing_ms.webserver","exporter":"peccm_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp20","name":"client_side_loading_ms","performanceMetric":"client_side_loading_ms.webserver","exporter":"peccm_exporter"}},{"monitoringParameter":{"monitoringParameterId":"mp21","name":"client_side_bw_kbps","performanceMetric":"client_side_bw_kbps.webserver","exporter":"peccm_exporter"}}],"autoScalingRule":[],"security":{"signature":"vCDN_NSD_SIGNATURE","algorithm":"vCDN_NSD_ALGORITHM","certificate":"vCDN_NSD_CERTIFICATE"}}}
  CDN_WEBSERVER_VNFD_0_9.json: |
    {"vnfdId":"webserver","vnfProvider":"ATOS","vnfProductName":"webserver","vnfSoftwareVersion":"0.1","vnfdVersion":"0.2","vnfProductInfoName":"vCDN webserver","vnfProductInfoDescription":"vCDN Web Server and Load Balancer","vnfmInfo":["vEPC_VNFM"],"vdu":[{"vduId":"webserver_vdu","name":"webserver","description":"VDU of the webserver","intCpd":[{"cpdId":"webDistInt","layerProtocol":"IPV4","description":"CP for the media content distribution","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}]}],"virtualComputeDesc":"VCD_webserver","virtualStorageDesc":["VSD_webserver"],"swImageDesc":{"id":"CDN_WebServer_SWID","name":"cirros-0.5.1-x86_64-disk","user_image":"ubuntu","version":"0.1","checksum":"TBD","containerFormat":"QCOW","diskFormat":"QCOW","minDisk":1,"minRam":1,"size":10,"swImage":"cirros-0.5.1-x86_64-disk","operatingSystem":"Ubuntu-10.04"},"configurableProperties":{}}],"virtualComputeDesc":[{"virtualComputeDescId":"VCD_webserver","virtualMemory":{"virtualMemSize":4,"virtualMemOversubscriptionPolicy":"asdasd","numaEnabled":false},"virtualCpu":{"numVirtualCpu":1,"cpuArchitecture":"x86_64","virtualCpuClock":0,"virtualCpuOversubscriptionPolicy":"asdasd"}}],"virtualStorageDesc":[{"id":"VSD_webserver","typeOfStorage":"VOLUME","sizeOfStorage":10,"swImageDesc":"CDN_WebServer_SWID"}],"vnfExtCpd":[{"cpdId":"webDistExt","layerProtocol":"IPV4","description":"External CP for the media content distribution","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"intCpd":"webDistInt"}],"deploymentFlavour":[{"flavourId":"df_webserver","description":"Standard deployment flavour of the CDN webserver","vduProfile":[{"vduId":"webserver_vdu","minNumberOfInstances":1,"maxNumberOfInstances":1}],"instantiationLevel":[{"levelId":"il_webserver","description":"Standard instantiation level of the CDN webserver","vduLevel":[{"vduId":"webserver_vdu","numberOfInstances":1}]}],"vnfLcmOperationsConfiguration":{}}],"configurableProperties":{"autoScalable":false,"autoHealable":false,"additionalConfigurableProperty":["vnf.spr21.vdu.spr21_vdu.extcp.spr21DistExt.floating","vnf.spr22.vdu.spr22_vdu.extcp.spr22DistExt.floating"]},"modifiableAttributes":{},"lifeCycleManagementScript":[{"event":["START_VNF_INSTANTIATION"],"script":""},{"event":["END_VNF_INSTANTIATION"],"script":""},{"event":["START_VNF_TERMINATION"],"script":""},{"event":["END_VNF_TERMINATION"],"script":""}]}
  CDN_SPR2_VNFD_0_9.json: |
    {"vnfdId":"spr2","vnfProvider":"ATOS","vnfProductName":"CDN cache","vnfSoftwareVersion":"0.1","vnfdVersion":"0.2","vnfProductInfoName":"vCDN cache","vnfProductInfoDescription":"vCDN Cache","vnfmInfo":["vEPC_VNFM"],"vdu":[{"vduId":"spr2_vdu","name":"spr2","description":"VDU of the first cache","intCpd":[{"cpdId":"spr2DistInt","layerProtocol":"IPV4","description":"CP for the cache media content to be distributed","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}]},{"cpdId":"spr2DataInt","layerProtocol":"IPV4","description":"CP for the cache media content to be retrieved","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":false,"iPAddressType":"IPv4","numberOfIpAddress":1}]}],"virtualComputeDesc":"VCD_spr2","virtualStorageDesc":["VSD_spr2"],"swImageDesc":{"id":"CDN_spr2_SWID","name":"cirros-0.5.1-x86_64-disk","user_image":"ubuntu","version":"0.1","checksum":"TBD","containerFormat":"QCOW","diskFormat":"QCOW","minDisk":1,"minRam":1,"size":10,"swImage":"cirros-0.5.1-x86_64-disk","operatingSystem":"Ubuntu-10.04"},"configurableProperties":{}}],"virtualComputeDesc":[{"virtualComputeDescId":"VCD_spr2","virtualMemory":{"virtualMemSize":4,"virtualMemOversubscriptionPolicy":"asdasd","numaEnabled":false},"virtualCpu":{"numVirtualCpu":1,"cpuArchitecture":"x86_64","virtualCpuClock":0,"virtualCpuOversubscriptionPolicy":"asdasd"}}],"virtualStorageDesc":[{"id":"VSD_spr2","typeOfStorage":"VOLUME","sizeOfStorage":10,"swImageDesc":"CDN_spr2_SWID"}],"vnfExtCpd":[{"cpdId":"spr2DistExt","layerProtocol":"IPV4","description":"External CP for the 1st cache media content to be distributed","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"intCpd":"spr2DistInt"},{"cpdId":"spr2DataExt","layerProtocol":"IPV4","description":"External CP for the 1st cache media content to be retrieved","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":false,"iPAddressType":"IPv4","numberOfIpAddress":1}],"intCpd":"spr2DataInt"}],"deploymentFlavour":[{"flavourId":"df_spr2","description":"Standard deployment flavour of the 1st CDN cache","vduProfile":[{"vduId":"spr2_vdu","minNumberOfInstances":1,"maxNumberOfInstances":1}],"instantiationLevel":[{"levelId":"il_spr2","description":"Standard instantiation level of the 1st CDN cache","vduLevel":[{"vduId":"spr2_vdu","numberOfInstances":1}]}],"vnfLcmOperationsConfiguration":{}}],"configurableProperties":{"autoScalable":false,"autoHealable":false,"additionalConfigurableProperty":["vnf.spr1.vdu.spr1_vdu.intcp.spr1DataInt.address"]},"modifiableAttributes":{},"lifeCycleManagementScript":[{"event":["START_VNF_INSTANTIATION"],"script":"#!/bin/bash \nip route del default \nip route add default via $$config$$managementGw \n"},{"event":["END_VNF_INSTANTIATION"],"script":""},{"event":["START_VNF_TERMINATION"],"script":""},{"event":["END_VNF_TERMINATION"],"script":""}]}
  CDN_SPR1_VNFD_0_9.json: |
    {"vnfdId":"spr1","vnfProvider":"ATOS","vnfProductName":"CDN origin server","vnfSoftwareVersion":"0.1","vnfdVersion":"0.2","vnfProductInfoName":"vCDN origin server","vnfProductInfoDescription":"vCDN Origin Server","vnfmInfo":["vEPC_VNFM"],"vdu":[{"vduId":"spr1_vdu","name":"spr1","description":"VDU of the origing server","intCpd":[{"cpdId":"spr1MgtInt","layerProtocol":"IPV4","description":"Management CP of the origin server","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}]},{"cpdId":"spr1DataInt","layerProtocol":"IPV4","description":"CP for the origin server media content","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":false,"iPAddressType":"IPv4","numberOfIpAddress":1}]}],"virtualComputeDesc":"VCD_spr1","virtualStorageDesc":["VSD_spr1"],"swImageDesc":{"id":"CDN_spr1_SWID","name":"cirros-0.5.1-x86_64-disk","user_image":"ubuntu","version":"0.1","checksum":"TBD","containerFormat":"QCOW","diskFormat":"QCOW","minDisk":1,"minRam":1,"size":50,"swImage":"cirros-0.5.1-x86_64-disk","operatingSystem":"Ubuntu-10.04"},"configurableProperties":{}}],"virtualComputeDesc":[{"virtualComputeDescId":"VCD_spr1","virtualMemory":{"virtualMemSize":4,"virtualMemOversubscriptionPolicy":"asdasd","numaEnabled":false},"virtualCpu":{"numVirtualCpu":1,"cpuArchitecture":"x86_64","virtualCpuClock":0,"virtualCpuOversubscriptionPolicy":"asdasd"}}],"virtualStorageDesc":[{"id":"VSD_spr1","typeOfStorage":"VOLUME","sizeOfStorage":50,"swImageDesc":"CDN_spr1_SWID"}],"vnfExtCpd":[{"cpdId":"spr1MgtExt","layerProtocol":"IPV4","description":"Management external CP of the Origin Server","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"intCpd":"spr1MgtInt"},{"cpdId":"spr1DataExt","layerProtocol":"IPV4","description":"External CP for the origin server media content","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":false,"iPAddressType":"IPv4","numberOfIpAddress":1}],"intCpd":"spr1DataInt"}],"deploymentFlavour":[{"flavourId":"df_spr1","description":"Standard deployment flavour of the CDN origin server","vduProfile":[{"vduId":"spr1_vdu","minNumberOfInstances":1,"maxNumberOfInstances":1}],"instantiationLevel":[{"levelId":"il_spr1","description":"Standard instantiation level of the CDN origin server","vduLevel":[{"vduId":"spr1_vdu","numberOfInstances":1}]}],"vnfLcmOperationsConfiguration":{}}],"configurableProperties":{"autoScalable":false,"autoHealable":false,"additionalConfigurableProperty":[]},"modifiableAttributes":{},"lifeCycleManagementScript":[{"event":["START_VNF_INSTANTIATION"],"script":""},{"event":["END_VNF_INSTANTIATION"],"script":""},{"event":["START_VNF_TERMINATION"],"script":""},{"event":["END_VNF_TERMINATION"],"script":""}]}
  CDN_PROBE_VNFD_0_9.json: |
    {"vnfdId":"probeserver","vnfProvider":"ATOS","vnfProductName":"probeserver","vnfSoftwareVersion":"0.1","vnfdVersion":"0.2","vnfProductInfoName":"vCDN probeserver","vnfProductInfoDescription":"vCDN Probe Server ","vnfmInfo":["vEPC_VNFM"],"vdu":[{"vduId":"probeserver_vdu","name":"probeserver","description":"VDU of the probeserver","intCpd":[{"cpdId":"probeProbeInt","layerProtocol":"IPV4","description":"CP for the media content distribution","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}]}],"virtualComputeDesc":"VCD_probeserver","virtualStorageDesc":["VSD_probeserver"],"swImageDesc":{"id":"CDN_probeserver_SWID","name":"cirros-0.5.1-x86_64-disk","user_image":"ubuntu","version":"0.1","checksum":"TBD","containerFormat":"QCOW","diskFormat":"QCOW","minDisk":1,"minRam":1,"size":10,"swImage":"cirros-0.5.1-x86_64-disk","operatingSystem":"Ubuntu-10.04"},"configurableProperties":{}}],"virtualComputeDesc":[{"virtualComputeDescId":"VCD_probeserver","virtualMemory":{"virtualMemSize":4,"virtualMemOversubscriptionPolicy":"asdasd","numaEnabled":false},"virtualCpu":{"numVirtualCpu":1,"cpuArchitecture":"x86_64","virtualCpuClock":0,"virtualCpuOversubscriptionPolicy":"asdasd"}}],"virtualStorageDesc":[{"id":"VSD_probeserver","typeOfStorage":"VOLUME","sizeOfStorage":10,"swImageDesc":"CDN_probeserver_SWID"}],"vnfExtCpd":[{"cpdId":"probeProbeExt","layerProtocol":"IPV4","description":"External CP for the media content distribution","addressData":[{"addressType":"IP_ADDRESS","iPAddressAssignment":false,"floatingIpActivated":true,"management":true,"iPAddressType":"IPv4","numberOfIpAddress":1}],"intCpd":"probeProbeInt"}],"deploymentFlavour":[{"flavourId":"df_probeserver","description":"Standard deployment flavour of the CDN probeserver","vduProfile":[{"vduId":"probeserver_vdu","minNumberOfInstances":1,"maxNumberOfInstances":1}],"instantiationLevel":[{"levelId":"il_probeserver","description":"Standard instantiation level of the CDN probeserver","vduLevel":[{"vduId":"probeserver_vdu","numberOfInstances":1}]}],"vnfLcmOperationsConfiguration":{}}],"modifiableAttributes":{},"lifeCycleManagementScript":[{"event":["START_VNF_INSTANTIATION"],"script":""},{"event":["END_VNF_INSTANTIATION"],"script":""},{"event":["START_VNF_TERMINATION"],"script":""},{"event":["END_VNF_TERMINATION"],"script":""}]}
  instantiate_vcdn.json: |
    {"name":"test_instance","description":"5gt service instance","vsdId":"{{vs_vsd_id}}","tenantId":"{{tenant}}","userData":{},"locationConstraints":{"latitude":"43.68","longitude":"10.35","range":"200"}}
  onboard_nst_vs.json: |
    {"nst":{"nstId":"vCDN_v02","nstName":"5gr_entertainment_ns","nstVersion":"0.1","nstProvider":"NXW","nsdId":"vCDN_v02","nsdVersion":"0.3","nstServiceProfile":{"eMBBPerfReq":[{"expDataRateDL":10220,"expDataRateUL":120,"areaTrafficCapDL":10220,"areaTrafficCapUL":210,"userDensity":22,"activityFactor":3220,"uESpeed":3220,"coverage":"coverage1"}]}}}
  onboard_vsb_vcdn.json: |
    {"vsBlueprint":{"version":"1.0","name":"CDN","description":"Content Delivery Network","sliceServiceType":"EMBB","embbServiceCategory":"URBAN_MACRO","parameters":[{"parameterId":"users","parameterName":"users","parameterType":"number","parameterDescription":"number of CDN users","applicabilityField":"media"}]},"translationRules":[{"nstId":"vCDN_v02","nsdId":"vCDN_v02","nsdVersion":"0.3","nsFlavourId":"df_vCDN","nsInstantiationLevelId":"il_vCDN_big","input":[{"parameterId":"users","minValue":1001,"maxValue":2500}]},{"nstId":"vCDN_v02","nsdId":"vCDN_v02","nsdVersion":"0.3","nsFlavourId":"df_vCDN","nsInstantiationLevelId":"il_vCDN_small","input":[{"parameterId":"users","minValue":1,"maxValue":1000}]}]}
  onboard_vsd_vcdn.json: |
    {"vsd":{"name":"VS_small","version":"0.2","sst":"URLLC","vsBlueprintId":"{{vs_vsb_id}}","managementType":"PROVIDER_MANAGED","qosParameters":{"users":"50"},"serviceConstraints":[],"sla":{}},"tenantId":"{{tenant}}","isPublic":true}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: so-test-config
data:
  regression_test_scale.py: |
    # Copyright 2018 CTTC www.cttc.es
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    # python imports
    from unittest import TestCase, main
    from http.client import HTTPConnection
    from json import dumps, loads, load
    from six.moves.configparser import RawConfigParser
    
    # mongodb imports
    from pymongo import MongoClient
    
    # project imports
    
    
    class TestRegression(TestCase):
    
        def setUp(self):
            self.ip = "localhost"
            self.port = "8080"
            self.headers = {'Content-Type': 'application/json',
                            'Accept': 'application/json'}
            self.timeout = 100
            # connect
            self.conn = HTTPConnection(self.ip, self.port, timeout=self.timeout)
            # on board necessary descriptors
            # drop all databases
            # create the 5gtso db
            # python imports
    
            # load db IP port
            config = RawConfigParser()
            config.read("../db/db.properties")
            db_ip = config.get("MongoDB", "db.ip")
            db_port = int(config.get("MongoDB", "db.port"))
            operation_client = MongoClient(db_ip, db_port)
            fgtso_db = operation_client.fgtso
            fgtso_db.nsd.delete_many({})
            fgtso_db.vnfd.delete_many({})
            fgtso_db.ns.delete_many({})
            fgtso_db.nsir.delete_many({})
            fgtso_db.operation.delete_many({})
            fgtso_db.resources.delete_many({})
            fgtso_db.alerts.delete_many({})
            # load desccriptors
            # path to descriptors folders
    
            path = "../descriptors/"
            # list of file names that contain ns and vnf descriptors
            ns_descriptors = ["CDN_all_NSD_0_17.json"]
            vnf_descriptors = ["CDN_PROBE_VNFD_0_9.json",
                               "CDN_SPR1_VNFD_0_9.json", "CDN_SPR2_VNFD_0_9.json",
                               "CDN_WEBSERVER_VNFD_0_9.json"]
            # correspondance of nsdId and nsdCloudifyId
            nsdCloudifyId = {"vCDN_v02": "unknown"}
            # for each nsd create record to be inserted
            nsd_json = {}  # load json file here
            for nsd_file in ns_descriptors:
                with open(path + nsd_file) as nsd_json:
                    nsd_json = load(nsd_json)
                nsd_record = {"nsdId": nsd_json["nsd"]["nsdIdentifier"],
                              "nsdCloudifyId": nsdCloudifyId[nsd_json["nsd"]["nsdIdentifier"]],
                              "version": nsd_json["nsd"]["version"],
                              "nsdName": nsd_json["nsd"]["nsdName"],
                              "nsdJson": nsd_json,
                              "domain": "local"}
                fgtso_db.nsd.insert_one(nsd_record)
            # for each nsd create record to be inserted
            vnfd_json = {}  # load json file here
            for vnfd_file in vnf_descriptors:
                with open(path + vnfd_file) as vnfd_json:
                    vnfd_json = load(vnfd_json)
                vnfd_record = {"vnfdId": vnfd_json["vnfdId"],
                               "vnfdVersion": vnfd_json["vnfdVersion"],
                               "vnfdName": vnfd_json["vnfProductName"],
                               "vnfdJson": vnfd_json}
                fgtso_db.vnfd.insert_one(vnfd_record)
    
        def tearDown(self):
            self.conn.close()
    
        def test_1_basic_instantiation_and_termination(self):
            """
            Check basic operations tests expecting a 200/201 result.
            """
    
            # request an nsId
            path = "/5gt/so/v1/ns"
            data = {"nsDescription": "nsDescription",
                    "nsName": "nsName",
                    "nsdId": "vCDN_v02"
                    }
            self.conn.request("POST", path, dumps(data), self.headers)
            self.conn.sock.settimeout(self.timeout)
            rsp = self.conn.getresponse()
            data = rsp.read().decode()
            self.assertEqual(rsp.status, 201)
            data = loads(data)
            nsId = data["nsId"]
    
            # instantiate the service
            path = "/5gt/so/v1/ns/" + nsId + "/instantiate"
            data = {"flavourId": "df_vCDN",
                    "nsInstantiationLevelId": "il_vCDN_small"
                    }
            self.conn.request("PUT", path, dumps(data), self.headers)
            self.conn.sock.settimeout(self.timeout)
            rsp = self.conn.getresponse()
            data = rsp.read().decode()
            self.assertEqual(rsp.status, 200)
            data = loads(data)
            operationId = data["operationId"]
    
            # # get operation status
            # path = "/5gt/so/v1/operation/" + operationId
            # self.conn.request("GET", path, None, self.headers)
            # self.conn.sock.settimeout(self.timeout)
            # rsp = self.conn.getresponse()
            # self.assertEqual(rsp.status, 200)
            #
            # # get ns information
            # path = "/5gt/so/v1/ns/" + nsId
            # self.conn.request("GET", path, None, self.headers)
            # self.conn.sock.settimeout(self.timeout)
            # rsp = self.conn.getresponse()
            # self.assertEqual(rsp.status, 200)
            print("Instantiation the service started")
            input("Press enter to terminate the service")
    
            # terminate the service
            path = "/5gt/so/v1/ns/" + nsId + "/terminate"
            self.conn.request("PUT", path, None, self.headers)
            self.conn.sock.settimeout(self.timeout)
            rsp = self.conn.getresponse()
            print(rsp.read().decode())
            self.assertEqual(rsp.status, 200)
        #
        #     # the following tests expect the NSD vCDN 0.2 and its VNFs to be loaded in the NSD/VNFD catalogues
        #     # get a NSD
        #     path = "/5gt/so/v1/ns/nsd/vCDN_v02/0.3"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     print(rsp.read().decode())
        #     self.assertEqual(rsp.status, 200)
        #
        #     # get a VNFD
        #     path = "/5gt/so/v1/ns/vnfd/spr22/0.2"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     print(rsp.read().decode())
        #     self.assertEqual(rsp.status, 200)
        #
        # def test_2_nbi_400_404_errors(self):
        #     """
        #     Check that NBI returns error 400/404.
        #     """
        #
        #     # request an nsId
        #     path = "/5gt/so/v1/ns"
        #     data = {"nsDescription": "nsDescription",
        #             "nsName": "nsName"
        #             }
        #     self.conn.request("POST", path, dumps(data), self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 400)
        #
        #     # request an nsId
        #     path = "/5gt/so/v1/ns"
        #     data = {"nsDescription": "nsDescription",
        #             "nsName": "nsName",
        #             "nsdId": "vCDN_v02"
        #             }
        #     self.conn.request("POST", path, dumps(data), self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     data = rsp.read().decode()
        #     self.assertEqual(rsp.status, 201)
        #     data = loads(data)
        #     nsId = data["nsId"]
        #
        #     # instantiate the service
        #     path = "/5gt/so/v1/ns/" + nsId + "/instantiate"
        #     data = {"flavourId": 1}
        #     self.conn.request("PUT", path, dumps(data), self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 400)
        #
        #     # instantiate the service
        #     path = "/5gt/so/v1/ns/unknowonId/instantiate"
        #     data = {"flavourId": "flavourId",
        #             "nsInstantiationLevelId": "nsInstantiationLevelId"
        #             }
        #     self.conn.request("PUT", path, dumps(data), self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # get operation status
        #     path = "/5gt/so/v1/operation/unknownId"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # get ns information
        #     path = "/5gt/so/v1/ns/unkownId"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # terminate the service
        #     path = "/5gt/so/v1/ns/unknownId/terminate"
        #     self.conn.request("PUT", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # the following tests expect the NSD vCDN 0.2 and its VNFs to be loaded in the NSD/VNFD catalogues
        #     # get a NSD
        #     path = "/5gt/so/v1/ns/nsd/CDN_v02/0.2"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # get a NSD
        #     path = "/5gt/so/v1/ns/nsd/vCDN_v02/0.3"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # get a VNFD
        #     path = "/5gt/so/v1/ns/vnfd/tpr22/0.2"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
        #
        #     # get a VNFD
        #     path = "/5gt/so/v1/ns/vnfd/spr22/0.3"
        #     self.conn.request("GET", path, None, self.headers)
        #     self.conn.sock.settimeout(self.timeout)
        #     rsp = self.conn.getresponse()
        #     self.assertEqual(rsp.status, 404)
    
    
    if __name__ == '__main__':
        main()
  requiements.txt: |
    certifi==2020.6.20
    chardet==3.0.4
    idna==2.10
    pymongo==3.11.2
    requests==2.24.0
    urllib3==1.25.11
  run_vs_test.py: |
    import json
    import requests
    from pymongo import MongoClient
    
    
    class VsApi:
        def __init__(self, ip, port):
            self.port = port
            self.ip = ip
            self.cookies = None
            self.username_admin = "admin"
            self.passw_admin = "admin"
    
        def login_admin(self):
            print("start login_admin")
            payload = {}
            url = "http://" + self.ip + ":" + self.port + "/login?username=" + self.username_admin + "&password=" \
                  + self.passw_admin
            response = requests.request("POST", url, data=payload)
            self.cookies = response.cookies
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code != 200:
                raise Exception('Return wrong code')
            print("finish login_admin")
    
        def create_group(self, group_name):
            print("start create_group")
            payload = {}
            headers = {
                'Content-Type': 'application/json',
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/" + self.username_admin + "/group/" + group_name
            response = requests.request("POST", url, headers=headers, data=payload, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [201, 409]:
                raise Exception('Return wrong code')
            print("finish create_group")
    
        def get_groups(self):
            print("start get_groups")
            headers = {
                'Content-Type': 'application/json',
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/" + self.username_admin + "/group"
            response = requests.request("GET", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200]:
                raise Exception('Return wrong code')
            print("finish get_groups")
            return json.loads(response.text)
    
        def create_tenant(self, tenant_name, password):
            print("start create_tenant")
            payload = {"username": tenant_name,
                       "password": password,
                       "allocatedResources":
                           {"diskStorage": 0,
                            "vCPU": 0,
                            "memoryRAM": 0}
                       }
    
            headers = {
                'Content-Type': 'application/json'
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/" + self.username_admin + "/group/" + tenant_name + "/tenant"
            response = requests.request("POST", url, headers=headers, data=json.dumps(payload), cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish create_tenant")
    
        def get_tenants(self):
            print("start get_tenants")
            headers = {
                'Content-Type': 'application/json'
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/" + self.username_admin + "/group"
            response = requests.request("GET", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish get_tenants")
            return json.loads(response.text)
    
        def delete_tenant(self, group_name, tenant_id):
            print("start get_tenants")
            headers = {
                'Content-Type': 'application/json'
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/" + self.username_admin + "/group/" + group_name + \
                  "/tenant/" + tenant_id
            response = requests.request("DELETE", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish get_tenants")
            return json.loads(response.text)
    
        def purge_vs_instance(self, vsi_id):
            print("start purgeVsInstance")
            headers = {
                'Content-Type': 'application/json'
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/basic/vslcm/vs/" + vsi_id
            response = requests.request("DELETE", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish purgeVsInstance")
            return json.loads(response.text)
    
        def terminate_vs_instance(self, vsi_id):
            print("start terminateVsInstance")
            headers = {
                'Content-Type': 'application/json'
            }
            url = "http://" + self.ip + ":" + self.port + "/vs/basic/vslcm/vs/" + vsi_id + "/terminate"
            response = requests.request("POST", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish terminateVsInstance")
    
        def create_sla(self, group_name, tenant_name):
            print("start create_sla")
            url = "http://" + self.ip + ":" + self.port + "/vs/admin/group/" + group_name + "/tenant/" + \
                  tenant_name + "/sla"
    
            payload = {
                "slaStatus": "ENABLED",
                "slaConstraints": [{
                    "maxResourceLimit": {
                        "diskStorage": 120,
                        "vCPU": 10,
                        "memoryRAM": 10240
                    },
                    "scope": "GLOBAL_VIRTUAL_RESOURCE"
                }
                ]
            }
    
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("POST", url, headers=headers, data=json.dumps(payload), cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201]:
                raise Exception('Return wrong code')
            print("finish create_sla")
    
        def get_sla(self, group_name, tenant_name):
            print("start get_sla")
            url = "http://" + self.ip + ":" + self.port + "/vs/admin/group/" + group_name + "/tenant/" + \
                  tenant_name + "/sla"
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("GET", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code in [404]:
                return []
            if response.status_code not in [200, 201]:
                raise Exception('Return wrong code')
            print("finish get_sla")
            return json.loads(response.text)
    
        def delete_sla(self, group_name, tenant_name, id_sla):
            print("start delete_sla")
            url = "http://" + self.ip + ":" + self.port + "/vs/admin/group/" + group_name + "/tenant/" + \
                  tenant_name + "/sla/" + str(
                id_sla)
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("DELETE", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201]:
                raise Exception('Return wrong code')
            print("finish delete_sla")
    
        def onboard_nst_vs(self):
            json_file = "json/onboard_nst_vs.json"
            print("start onboard_nst_vs")
            url = "http://" + self.ip + ":" + self.port + "/ns/catalogue/nstemplate"
            with open(json_file, "r") as read_file:
                payload = json.load(read_file)
    
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("POST", url, headers=headers, data=json.dumps(payload), cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish onboard_nst_vs")
    
        def get_onboard_nst_vss(self):
            print("start get_onboard_nst_vs")
            url = "http://" + self.ip + ":" + self.port + "/ns/catalogue/nstemplate"
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("GET", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish get_onboard_nst_vs")
            return json.loads(response.text)
    
        def delete_onboard_nst_vs(self, ns_template_id):
            print("start delete_onboard_nst_vs")
            url = "http://" + self.ip + ":" + self.port + "/ns/catalogue/nstemplate/" + ns_template_id
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("DELETE", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish delete_onboard_nst_vs")
    
        def onboard_vsb_vcdn(self):
            json_file = "json/onboard_vsb_vcdn.json"
            print("start onboard_vsb_vcdn")
            url = "http://" + self.ip + ":" + self.port + "/portal/catalogue/vsblueprint"
            with open(json_file, "r") as read_file:
                payload = json.load(read_file)
    
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("POST", url, headers=headers, data=json.dumps(payload), cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish onboard_vsb_vcdn")
            return response.text
    
        def get_onboard_vsb_vcdns(self):
            print("start onboard_vsb_vcdns")
            url = "http://" + self.ip + ":" + self.port + "/portal/catalogue/vsblueprint"
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("GET", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish onboard_vsb_vcdns")
            return json.loads(response.text)
    
        def delete_onboard_vsb_vcdns(self, vs_blueprint_id):
            print("start delete_onboard_vsb_vcdns")
            url = "http://" + self.ip + ":" + self.port + "/portal/catalogue/vsblueprint/" + vs_blueprint_id
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("DELETE", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [204]:
                raise Exception('Return wrong code')
            print("finish delete_onboard_vsb_vcdns")
            return json.dumps(response.text)
    
        def login_tenant(self, username, password):
            print("start login_tenant")
            url = "http://" + self.ip + ":" + self.port + "/login?username=" + username + "&password=" + password
            payload = None
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("POST", url, headers=headers, data=json.dumps(payload))
            self.cookies = response.cookies
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201, 409]:
                raise Exception('Return wrong code')
            print("finish login_tenant")
    
        def onboard_vsd_vcdn(self, vs_vsb_id, tenant_id):
            json_file = "json/onboard_vsd_vcdn.json"
            print("start onboard_vsd_vcdn")
            url = "http://" + self.ip + ":" + self.port + "/portal/catalogue/vsdescriptor"
            with open(json_file, "r") as read_file:
                payload = json.load(read_file)
    
            payload['tenantId'] = tenant_id
            payload['vsd']['vsBlueprintId'] = vs_vsb_id
    
            headers = {
                'Content-Type': 'application/json',
            }
            data = json.dumps(payload)
            response = requests.request("POST", url, headers=headers, data=data, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201]:
                raise Exception('Return wrong code')
            print("finish onboard_vsd_vcdn")
            return response.text
    
        def get_onboard_vsd_vcdns(self):
            print("start get_onboard_vsd_vcdns")
            url = "http://" + self.ip + ":" + self.port + "/portal/catalogue/vsdescriptor"
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("GET", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201]:
                raise Exception('Return wrong code')
            print("finish get_onboard_vsd_vcdns")
            return json.loads(response.text)
    
        def delete_onboard_vsd_vcdn(self, vs_descriptor_id):
            print("start delete_onboard_vsd_vcdn")
            url = "http://" + self.ip + ":" + self.port + "/portal/catalogue/vsdescriptor/" + vs_descriptor_id
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("DELETE", url, headers=headers, cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 204]:
                raise Exception('Return wrong code')
            print("finish delete_onboard_vsd_vcdn")
            return json.dumps(response.text)
    
        def instantiate_vcdn(self, vs_vsd_id, tenant_id):
            json_file = "json/instantiate_vcdn.json"
            print("start instantiate_vcdn")
            url = "http://" + self.ip + ":" + self.port + "/vs/basic/vslcm/vs"
            with open(json_file, "r") as read_file:
                payload = json.load(read_file)
    
            payload['vsdId'] = vs_vsd_id
            payload['tenantId'] = tenant_id
    
            headers = {
                'Content-Type': 'application/json',
            }
            response = requests.request("POST", url, headers=headers, data=json.dumps(payload), cookies=self.cookies)
            print(response.text)
            print("code: " + str(response.status_code))
            if response.status_code not in [200, 201]:
                raise Exception('Return wrong code')
            print("finish instantiate_vcdn")
    
        def delete_vsb_vsb_sla_objects(self):
            # delete_onboard_vsd_vcdn
            self.login_admin()
            tenants = self.get_tenants()
            for tenant_object in tenants:
                if tenant_object['name'] in ["admin", "user"]:
                    continue
                self.login_tenant(tenant_object['name'], tenant_object['name'])
                vsd_vcdns = self.get_onboard_vsd_vcdns()
                for vsd_vcdn in vsd_vcdns:
                    vs_descriptor_id = vsd_vcdn['vsDescriptorId']
                    self.delete_onboard_vsd_vcdn(vs_descriptor_id)
            # delete_onboard_vsb_vcdns
            self.login_admin()
            vsb_vcdns = self.get_onboard_vsb_vcdns()
            for vsb_vcdn in vsb_vcdns:
                vs_blueprint_id = vsb_vcdn['vsBlueprintId']
                self.delete_onboard_vsb_vcdns(vs_blueprint_id)
            # delete_onboard_nst_vs
            nst_vss = self.get_onboard_nst_vss()
            for nst_vs in nst_vss:
                ns_template_id = nst_vs['nsTemplateId']
                self.delete_onboard_nst_vs(ns_template_id)
    
            # delete_sla
            tenants = self.get_tenants()
            for tenant_object in tenants:
                if tenant_object['name'] in ["admin", "user"]:
                    continue
                else:
                    slas = self.get_sla(tenant_object['name'], tenant_object['name'])
                    for sla in slas:
                        sla_id = sla["id"]
                        self.delete_sla(tenant_object['name'], tenant_object['name'], sla_id)
    
    
    def load_nsd_vnfd_to_so(mongodb_ip, mongodb_port):
        db_ip = mongodb_ip
        db_port = mongodb_port
        operation_client = MongoClient(db_ip, int(db_port))
        fgtso_db = operation_client.fgtso
        fgtso_db.nsd.delete_many({})
        fgtso_db.vnfd.delete_many({})
        fgtso_db.ns.delete_many({})
        fgtso_db.nsir.delete_many({})
        fgtso_db.operation.delete_many({})
        fgtso_db.resources.delete_many({})
        fgtso_db.alerts.delete_many({})
        # load desccriptors
        # path to descriptors folders
    
        path = "json/"
        # list of file names that contain ns and vnf descriptors
        ns_descriptors = ["CDN_all_NSD_0_17.json"]
        vnf_descriptors = ["CDN_PROBE_VNFD_0_9.json",
                           "CDN_SPR1_VNFD_0_9.json", "CDN_SPR2_VNFD_0_9.json",
                           "CDN_WEBSERVER_VNFD_0_9.json"]
        # correspondance of nsdId and nsdCloudifyId
        nsdCloudifyId = {"vCDN_v02": "unknown"}
        # for each nsd create record to be inserted
        nsd_json = {}  # load json file here
        for nsd_file in ns_descriptors:
            with open(path + nsd_file) as nsd_json:
                nsd_json = json.load(nsd_json)
            nsd_record = {"nsdId": nsd_json["nsd"]["nsdIdentifier"],
                          "nsdCloudifyId": nsdCloudifyId[nsd_json["nsd"]["nsdIdentifier"]],
                          "version": nsd_json["nsd"]["version"],
                          "nsdName": nsd_json["nsd"]["nsdName"],
                          "nsdJson": nsd_json,
                          "domain": "local"}
            fgtso_db.nsd.insert_one(nsd_record)
        # for each nsd create record to be inserted
        vnfd_json = {}  # load json file here
        for vnfd_file in vnf_descriptors:
            with open(path + vnfd_file) as vnfd_json:
                vnfd_json = json.load(vnfd_json)
            vnfd_record = {"vnfdId": vnfd_json["vnfdId"],
                           "vnfdVersion": vnfd_json["vnfdVersion"],
                           "vnfdName": vnfd_json["vnfProductName"],
                           "vnfdJson": vnfd_json}
            fgtso_db.vnfd.insert_one(vnfd_record)
    
    
    if __name__ == "__main__":
        load_nsd_vnfd_to_so("so-mongo", "27017")
    
        vs_api1 = VsApi("vs-app", "8082")
        # vs_api1.delete_vsb_vsb_sla_objects()
    
        vs_api1.login_admin()
        group = "CDN"
        vs_api1.create_group(group)
        tenant = "CDN"
        vs_api1.create_tenant(tenant, tenant)
        vs_api1.create_sla(group, tenant)
        vs_api1.onboard_nst_vs()
        vs_vsb_id = vs_api1.onboard_vsb_vcdn()
        tenant = "CDN"
        vs_api1.login_tenant(tenant, tenant)
        vs_vsd_id = vs_api1.onboard_vsd_vcdn(vs_vsb_id, tenant)
        vs_api1.instantiate_vcdn(vs_vsd_id, tenant)
    
        print("Started instantiate_vcdn")
---
apiVersion: v1
kind: Service
metadata:
  name: so-app
  labels:
    app: so-app
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: placeholder1
  - port: 8085
    protocol: TCP
    name: placeholder2
  selector:
    app: so-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: so-app-deployment
spec:
  selector:
    matchLabels:
      app: so-app
  replicas: 1
  template:
    metadata:
      labels:
        app: so-app
    spec:
      volumes:
      - name: so-script-config-volume
        configMap:
          name: so-script-config
          items:
            - key: coreMano.properties
              path: coreMano.properties
            - key: db.properties
              path: db.properties
            - key: mtp.properties
              path: mtp.properties
            - key: rooe.properties
              path: rooe.properties
            - key: vim.properties
              path: vim.properties
            - key: monitoring.properties
              path: monitoring.properties
            - key: vs.properties
              path: vs.properties
            - key: federation.properties
              path: federation.properties
            - key: start.sh
              path: start.sh
            - key: soscript.sh
              path: soscript.sh
      - name: so-json-config-volume
        configMap:
          name: so-json-config
          items:
            - key: CDN_all_NSD_0_17.json
              path: CDN_all_NSD_0_17.json
            - key: CDN_WEBSERVER_VNFD_0_9.json
              path: CDN_WEBSERVER_VNFD_0_9.json
            - key: CDN_SPR2_VNFD_0_9.json
              path: CDN_SPR2_VNFD_0_9.json
            - key: CDN_SPR1_VNFD_0_9.json
              path: CDN_SPR1_VNFD_0_9.json
            - key: CDN_PROBE_VNFD_0_9.json
              path: CDN_PROBE_VNFD_0_9.json
            - key: instantiate_vcdn.json
              path: instantiate_vcdn.json
            - key: onboard_nst_vs.json
              path: onboard_nst_vs.json
            - key: onboard_vsb_vcdn.json
              path: onboard_vsb_vcdn.json
            - key: onboard_vsd_vcdn.json
              path: onboard_vsd_vcdn.json
      - name: so-test-config-volume
        configMap:
          name: so-test-config
          items:
            - key: regression_test_scale.py
              path: regression_test_scale.py
            - key: requiements.txt
              path: requiements.txt
            - key: run_vs_test.py
              path: run_vs_test.py
      containers:
      - name: so-app
        image: img:5000/so_app:local
        command: ["sh", "-c", "bash /usr/src/app/5Gr-SO/tmp/cm/soscript.sh"]
        volumeMounts:
          - name: so-script-config-volume
            mountPath: /usr/src/app/5Gr-SO/tmp/cm
          - name: so-test-config-volume
            mountPath: /usr/src/app/5Gr-SO/test/tmp
          - name: so-json-config-volume
            mountPath: /usr/src/app/5Gr-SO/test/json
        ports:
        - containerPort: 8080
        - containerPort: 8085
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: so-pa-generic-config
data:
  settings.conf: |
    # GA configuration parameters
    ########################################
    crossover_rate: 0.5
    mutation_rate: 0.005
    solution_pool_size: 50
    generations: 20
    # one of "cost" (default), "availability", "latency"
    optimize_for: "latency"
    # convergence criteria
    # If convergence_check is set to true, it checks if the value of 
    # the objective function does not change more than delta for 
    # consecutive generations, and if so for stop_after generations
    # it returns the solution. If set to false, execution stops only
    # after all generations have been completed.
    convergence_check: True
    delta: 0.0001
    stop_after: 20
    # True if we are considering processing latency or not
    # (note that processing latency is always used for constraint checking)
    processing_latency: False
    # Other
    ########################################
    # scenario/topology
    # If you comment this out, a "scenario" variable should exist in the configuration
    # If the REST front end is in use, typically a "scenario" variable will be
    # placed by the caller of the algorithm (REST front end) before initializing
    # the algorithm instance.
    #scenario_file: "./updated_base_pimrc18_scenario.json"
    # where to output the solution
    solution_file: "./solution-cost-based.json"
    # where to store data on the evolution of the algorithm
    # (i.e., fitness function value for best solution per generation)
    generations_file: "./generations-cost-based.dat"
    # Change to INFO, DEBUG, etc. for a more verbose output
    loglevel: "NONE"
    # RNG seed
    # You can set it for repeatable experiments.
    #seed: 1526576593
    # Front-end server configuration options
    ########################################
    server_port: 6161
    # MongoDB-related information
    #db_host: "so_mongo"
    db_host: "so-mongo"
    db_port: 27017
    db_name: "ga_frontend_db"
---
apiVersion: v1
kind: Service
metadata:
  name: so-pa-generic
  labels:
    app: so-pa-generic
spec:
  type: NodePort
  ports:
  - port: 6161
  selector:
    app: so-pa-generic
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: so-pa-generic-deployment
spec:
  selector:
    matchLabels:
      app: so-pa-generic
  replicas: 1
  template:
    metadata:
      labels:
        app: so-pa-generic
    spec:
      volumes:
#      - name: so-pa-volume
#        emptyDir: {}
      - name: config
        configMap:
          name: so-pa-generic-config
      containers:
      - name: so-pa-generic
        image: img:5000/pa_generic:local
#        command: ["sh", "-c", "cp -f  /PA/temp/settings.conf  /PA/settings.conf && python /PA/ga_frontend.py -c settings.conf"]
        command: ["sh", "-c", "cp -f  /PA/cm/settings.conf  /PA/settings.conf && python /PA/ga_frontend.py -c settings.conf"]
        volumeMounts:
          - name: config
            mountPath: /PA/cm
        ports:
        - containerPort: 6161
      initContainers:
        - name: wait-for-mongo
          image: busybox:latest
          command: ["sh", "-c", "until nc -z so-mongo 27017; do echo waiting for mongo; sleep 1; done"]
---
apiVersion: v1
kind: Service
metadata:
  name: so-mongo
  labels:
    app: so-mongo
spec:
  ports:
  - port: 27017
  clusterIP: None
  selector:
    app: so-mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
#  name: so-mongo-deployment
  name: so-mongo-ss
spec:
  serviceName: so-mongo
  selector:
    matchLabels:
      app: so-mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: so-mongo
    spec:
      containers:
      - name: so-mongo
#        image: mongo:3.2
        image: mongo:3.6
        ports:
        - containerPort: 27017
#---
#kind: StorageClass
#apiVersion: storage.k8s.io/v1
#metadata:
#  name: so-mongo
#provisioner: kubernetes.io/no-provisioner #?
#volumeBindingMode: WaitForFirstConsumer   #?
#allowVolumeExpansion: true
#---
#apiVersion: v1
#kind: PersistentVolume
#metadata:
#    name: so-mongo
#spec:
#  capacity:
#    storage: 2Gi                        #?
#  volumeMode: Filesystem                #?
#  accessModes:
#    - ReadWriteOnce                     #?
#  persistentVolumeReclaimPolicy: Retain #?
#  storageClassName: so-mongo
#  local:
#    path: /storage01
#  nodeAffinity:
#    required:
#      nodeSelectorTerms:
#      - matchExpressions:
#        - key: kubernetes.io/hostname
#          operator: In
#          values:
#            - minikube
#---
#kind: PersistentVolumeClaim
#apiVersion: v1
#metadata:
#  name: so-mongo
#spec:
#  storageClassName: so-mongo
#  accessModes:
#    - ReadWriteOnce
#  volumeMode: Filesystem
#  resources:
#    requests:
#      storage: 1Gi
